import data from "../src/data";

type _t = keyof typeof data;

import Head from "next/head";
import NavBar from "../components/NavBar";
import Tool from "../Tool";

type data_type = {
  title: string;
  description: string;
  color: string;
  type: string;
};

export async function getStaticPaths() {
  const paths = Object.keys(routes).map((key) => ({
    params: { tool: key.substring(1) },
  }));
  return {
    paths,
    fallback: false,
  };
}
export async function getStaticProps({
  params,
}: {
  params: {
    tool: string;
  };
}) {
  const item = routes[`/${params.tool}` as keyof typeof routes].item;
  return { props: { item } };
}

export default ({ item }: { item: data_type }) => {
  return (
    //     Type '{ state: ToolState; dispatch: Dispatch<ToolAction>; }' is not assignable to type 'ToolState'.
    //   Object literal may only specify known properties, and 'state' does not exist in type 'ToolState'.ts(2322)
    // index.d.ts(339, 9): The expected type comes from property 'value' which is declared here on type 'IntrinsicAttributes & ProviderProps<ToolState>'
    // (property) state: ToolState
    <>
      <Head>
        <title>PDFEquips | {item.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.png" />
      </Head>
      <NavBar />
      <Tool data={item} />
    </>
  );
};

// export default ToolPage;
export const routes = {
  "/merge-pdf": { item: data["Merge_PDF"] },
  "/split-pdf": { item: data["Split_PDF"] },
  "/compress-pdf": { item: data["Compress_PDF"] },
  "/pdf-to-powerpoint": { item: data["PDF_to_Powerpoint"] },
  "/jpg-to-pdf": { item: data["JPG_to_PDF"] },
  "/word-to-pdf": { item: data["WORD_to_PDF"] },
  "/powerpoint-to-pdf": { item: data["POWERPOINT_to_PDF"] },
  "/excel-to-pdf": { item: data["EXCEL_to_PDF"] },
  "/html-to-pdf": { item: data["HTML_to_PDF"] },
  "/pdf-to-jpg": { item: data["PDF_to_JPG"] },
  "/pdf-to-word": { item: data["PDF_to_WORD"] },
  "/pdf-to-excel": { item: data["PDF_to_EXCEL"] },
  "/pdf-to-pdf-a": { item: data["PDF_to_PDF_A"] },
};
